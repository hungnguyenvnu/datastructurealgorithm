// Remove duplicated from sorted array
class Solution {
public:
    int removeDuplicates(vector<int>& nums) 
    {
        int nSize = nums.size();
        if (nSize <= 1)
        {
            iRet = nSize;
        }
        else
        {
            auto itPrev = nums.begin();
            auto itNext = itPrev + 1;
            
            while (itNext != nums.end())
            {
                if (*itPrev == *itNext)
                {
                    itNext = nums.erase(itNext);
                    nSize--;
                }
                else
                {
                    itPrev++;
                    itNext++;
                }
            }
        }
        return nSize;
    }
};


// Contain duplicated
class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        bool bRet = false;
        int nSize = nums.size();
        
        // 1st solution: Use 2 for loop: 
        for (int i = 0; i < nSize; i++)
        {
            for (int j = i + 1; j < nSize; j++)
            {
                if (nums.at(i) == nums.at(j))
                {
                    bRet = true;
                    break;
                }
            }
            if (bRet == true)
            {
                break;
            }
        }
        
        // 2nd solution: sort then check same element
        std::sort(nums.begin(), nums.end());
        
        for (int i = 0; i < (nSize - 1); i++)
        {
            if (nums.at(i) == nums.at(i+1))
            {
                bRet = true;
                break;
            }
            
        }
        return bRet;
    }
};

// Find the third largest number in array
class Solution {
public:
    int thirdMax(vector<int>& nums) {
	 int nSize = nums.size();
	 if (nSize == 1)
	 {
		 return nums.at(0);
	 }
	 else if (nSize == 2)
	 {
		 return std::max(nums.at(0), nums.at(1));
	 }
	 else
	 {
		 int nFirst = INT_MIN;
		 int nSecond = INT_MIN;
		 int nThird = INT_MIN;
		 for (int i = 0; i < nSize; i++)
		 {
			 int nElm = nums.at(i);
			 if (nElm > nFirst)
			 {
				 nThird = nSecond;
				 nSecond = nFirst;
				 nFirst = nElm;
			 }
             // Elm is between first and second
			 else if (nElm > nSecond && nElm < nFirst)
			 {
				 nThird = nSecond;
				 nSecond = nElm;
			 }
             // Elm is between third and nsecond
			 else if (nElm > nThird && nElm < nSecond)
			 {
				 nThird = nElm;
			 }
		 }
		 return nThird;
	 }
    }
        
};
